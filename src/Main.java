import java.time.LocalDate;

public class Main {

    public static boolean isLeapYear(int year) {
        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
    }

    public static void printIsLeapYear(int year) {
        boolean isLeapYear = true;
        System.out.printf("Год %s является високосным ", year);
        System.out.println();
    }

    private static void printIsLeapYearResult(int year) {
        boolean isLeapYear = false;

        System.out.printf("Год %s не является високосным ", year);
    }

    public static int getClientOs(String osName) {
        if (osName.equals("iOS")) {
            return 0;
        } else {
            return 1;
        }
    }

    public static int currentYear = LocalDate.now().getYear();

    public static boolean versionInstallation (int osName, int clientDeviceYear) {
        if (osName == 0 && currentYear >= clientDeviceYear) {
            System.out.println("Установите  версию приложения для iOS по ссылке");
        } else if (osName == 0 && currentYear < clientDeviceYear) {
            System.out.println("Установите  облегченную версию приложения для iOS по ссылке");
        } else if (osName == 1 && currentYear < clientDeviceYear) {
            System.out.println("Установите облегченную версию приложения для Android по ссылке");
        } else {
            System.out.println("Установите версию приложения для Android по ссылке");
        }
        return false;
    }

    public static int deliveryTime(int deliveryDistance) {

        if (deliveryDistance <= 20) {
            System.out.println("Доставка осуществится в течении 1 суток");
        }else if (deliveryDistance <= 60){
            System.out.println("Доставка осуществится в течении 2 суток");
        }else if (deliveryDistance<=100){
            System.out.println("Доставка осуществится в течении 3 суток");
        }else{
            System.out.println("Доставка не осуществляется");
        }
        return deliveryDistance;
    }


//    Задание 1
//    Реализуйте метод, который получает в качестве параметра год, а затем проверяет, является ли он високосным,
//    и выводит результат в консоль. 
//    *Эту проверку вы уже реализовывали в задании по условным операторам.*
//    Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
//    Результат программы выведите в консоль. Если год високосный, то должно быть выведено “*номер года —
//    * високосный год”. Если год не високосный, то, соответственно: “*номер года —* не **високосный год”.
//    *Подсказку с выполнением задания вы можете найти в шпаргалке урока.*

    public static void main(String[] args) {
        System.out.println("Задание 1");
        int year = 2020;
        if (isLeapYear(year) == false) {
            printIsLeapYearResult(year);
        } else if (isLeapYear(year) == true) {
            printIsLeapYear(year);
        }


        //    ### Задание 2
//    Вспомним задание 2 по условным операторам, где нам необходимо было предложить пользователю облегченную версию
//    приложения.
//- Текст прошлого задания
//    К нам пришли коллеги и сообщили, что нам нужно знать не только операционную систему телефона, но и год его
//    создания: от этого зависит, подойдет ли приложение для телефона или оно просто не установится.
//    Если телефон произведен с 2015 по нынешний год, то приложение будет работать корректно.
//    Если телефон произведен ранее 2015 года, то клиенту нужно посоветовать установить облегченную версию приложения.
//    Ваша задача: написать программу, которая выдает соответствующее сообщение клиенту при наличии двух условий —
//    операционной системы телефона (iOS или Android) и года производства.
//    Если год выпуска ранее 2015 года, то к сообщению об установке нужно добавить информацию об облегченной версии.
//    Например, для iOS оно будет звучать так:
//    «Установите облегченную версию приложения для iOS по ссылке».
//    А для Android так:
//    «Установите облегченную версию приложения для Android по ссылке».
//    При этом для пользователей с телефоном с 2015 года выпуска нужно вывести обычное предложение об установке
//    приложения.
//    Для обозначения года создания используйте переменную clientDeviceYear, где необходимо указать 2015 год.
//    **Важно**: вложенность больше двух этажей не допускается (условный оператор внутри условного оператора).
//    Напишите метод, куда подаются два параметра: тип операционной системы (ОС) ( 0 — iOS или 1 — Android )
//    и год выпуска устройства.
//    Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
//    Текущий год можно получить таким способом:
//    int currentYear = LocalDate.now().getYear();
//    Или самим задать значение вручную, введя в переменную числовое значение.
//    В результате программа должна выводить в консоль в зависимости от исходных данных, какую версию приложения
//    (обычную или lite) и для какой ОС (Android или iOS) нужно установить пользователю.
        System.out.println("Задание 2");
        int currentYear = LocalDate.now().getYear();
        versionInstallation(getClientOs("iOS"), 2015);

//      Задание 3
//      Возвращаемся к любимой многими задаче на расчет дней доставки банковской карты от банка.
//      Наша задача — доработать код, а именно написать метод, который на вход принимает дистанцию
//      и возвращает итоговое количество дней доставки.
        System.out.println("Задание 3");

        deliveryTime(45);





    }
}